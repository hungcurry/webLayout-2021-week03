// container
.container {
  margin: 0 auto;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
  width: 100%;

  @each $breakpoint, $container-max-width in $container-max-widths {
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      max-width: $container-max-width;
    }
  }
}
.container-fluid {
  width: 100%;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
  margin-right: auto;
  margin-left: auto;
}
// row
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: ($grid-gutter-width / -2);
  margin-left: ($grid-gutter-width / -2);
  &.no-gutters {
    margin-right: 0;
    margin-left: 0;
    > [class*='col-'] {
      padding-right: 0;
      padding-left: 0;
    }
  }
}
// col
%col {
  position: relative;
  width: 100%;
  min-height: 1px; // Prevent collapsing
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

.col {
  @extend %col;
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
}

@for $i from 1 through ($grid-columns) {
  .col-#{$i} {
    @extend %col;
    flex: 0 0 percentage($i / $grid-columns);
    max-width: percentage($i / $grid-columns);
  }
  @each $breakpoint in map-keys($grid-breakpoints) {
    .col-#{$breakpoint}-#{$i} {
      @extend %col;
    }
  }
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up(#{$breakpoint}) {
    @for $i from 1 through ($grid-columns) {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 percentage($i / $grid-columns);
        max-width: percentage($i / $grid-columns);
      }
    }
  }
}
